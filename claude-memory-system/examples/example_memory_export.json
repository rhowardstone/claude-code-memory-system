[
  {
    "id": "abc123_2025-01-15T10:30:00_0",
    "document": "Fix authentication token expiry handling → Modified auth.ts to implement token refresh logic",
    "metadata": {
      "session_id": "abc123",
      "timestamp": "2025-01-15T10:30:00",
      "intent": "Fix 401 errors on API calls after token expires",
      "action": "Modified auth.ts to add automatic token refresh before expiry, implemented refresh token rotation, added retry logic for failed requests",
      "outcome": "Tests passing, authentication flow robust, no more 401 errors",
      "chunk_index": 0,
      "importance_score": 24.5,
      "importance_category": "critical",
      "artifacts": "{\"code_snippets\": [\"async function refreshToken() { const response = await fetch('/api/refresh', { method: 'POST', headers: { 'Authorization': `Bearer ${refreshToken}` } }); return response.json(); }\"], \"file_paths\": [\"src/auth.ts\", \"src/auth.test.ts\"], \"commands\": [\"npm test src/auth.test.ts\"], \"architecture_mentions\": [\"token refresh flow\", \"retry mechanism\"], \"error_messages\": [], \"counts\": {\"code_snippets\": 1, \"file_paths\": 2, \"commands\": 1, \"architecture_mentions\": 2, \"errors\": 0}}",
      "has_code": true,
      "has_files": true,
      "has_architecture": true
    }
  },
  {
    "id": "abc123_2025-01-15T11:00:00_1",
    "document": "Implement user profile API endpoint → Created REST endpoint with validation",
    "metadata": {
      "session_id": "abc123",
      "timestamp": "2025-01-15T11:00:00",
      "intent": "Add API endpoint for updating user profiles",
      "action": "Created routes/profile.ts with PUT endpoint, added Zod validation schema, implemented profile update logic with optimistic locking",
      "outcome": "Endpoint working, validation prevents invalid data, tests cover edge cases",
      "chunk_index": 1,
      "importance_score": 16.0,
      "importance_category": "high",
      "artifacts": "{\"code_snippets\": [\"const ProfileSchema = z.object({ name: z.string().min(1).max(100), email: z.string().email(), avatar: z.string().url().optional() });\"], \"file_paths\": [\"src/routes/profile.ts\", \"src/schemas/profile.ts\"], \"commands\": [\"curl -X PUT http://localhost:3000/api/profile\"], \"architecture_mentions\": [\"optimistic locking\"], \"error_messages\": [], \"counts\": {\"code_snippets\": 1, \"file_paths\": 2, \"commands\": 1, \"architecture_mentions\": 1, \"errors\": 0}}",
      "has_code": true,
      "has_files": true,
      "has_architecture": true
    }
  },
  {
    "id": "abc123_2025-01-15T11:30:00_2",
    "document": "Add input validation to prevent XSS → Modified forms to sanitize user input",
    "metadata": {
      "session_id": "abc123",
      "timestamp": "2025-01-15T11:30:00",
      "intent": "Security fix: prevent XSS attacks through user input",
      "action": "Added DOMPurify library, created sanitization middleware, applied to all user-facing forms",
      "outcome": "XSS vulnerability patched, security audit passing",
      "chunk_index": 2,
      "importance_score": 22.0,
      "importance_category": "critical",
      "artifacts": "{\"code_snippets\": [\"import DOMPurify from 'dompurify'; const sanitize = (input: string) => DOMPurify.sanitize(input, { ALLOWED_TAGS: ['b', 'i', 'em', 'strong'] });\"], \"file_paths\": [\"src/middleware/sanitize.ts\", \"src/components/Form.tsx\"], \"commands\": [\"npm install dompurify @types/dompurify\"], \"architecture_mentions\": [\"XSS protection\"], \"error_messages\": [], \"counts\": {\"code_snippets\": 1, \"file_paths\": 2, \"commands\": 1, \"architecture_mentions\": 1, \"errors\": 0}}",
      "has_code": true,
      "has_files": true,
      "has_architecture": true
    }
  },
  {
    "id": "abc123_2025-01-15T12:00:00_3",
    "document": "Refactor database queries for performance → Optimized N+1 query problem",
    "metadata": {
      "session_id": "abc123",
      "timestamp": "2025-01-15T12:00:00",
      "intent": "Improve API response times by fixing database query inefficiency",
      "action": "Identified N+1 queries in user endpoint, added eager loading with joins, implemented query result caching",
      "outcome": "Response time reduced from 800ms to 120ms, load testing shows 5x improvement",
      "chunk_index": 3,
      "importance_score": 18.5,
      "importance_category": "high",
      "artifacts": "{\"code_snippets\": [\"const users = await db.user.findMany({ include: { profile: true, posts: { take: 10 } } });\"], \"file_paths\": [\"src/db/queries/users.ts\"], \"commands\": [\"npm run benchmark\"], \"architecture_mentions\": [\"eager loading\", \"query optimization\"], \"error_messages\": [], \"counts\": {\"code_snippets\": 1, \"file_paths\": 1, \"commands\": 1, \"architecture_mentions\": 2, \"errors\": 0}}",
      "has_code": true,
      "has_files": true,
      "has_architecture": true
    }
  },
  {
    "id": "abc123_2025-01-15T12:30:00_4",
    "document": "Set up CI/CD pipeline with GitHub Actions → Automated testing and deployment",
    "metadata": {
      "session_id": "abc123",
      "timestamp": "2025-01-15T12:30:00",
      "intent": "Automate testing and deployment process",
      "action": "Created GitHub Actions workflow for testing, linting, and deployment to production",
      "outcome": "CI/CD working, deploys trigger on main branch, tests run on all PRs",
      "chunk_index": 4,
      "importance_score": 15.0,
      "importance_category": "high",
      "artifacts": "{\"code_snippets\": [], \"file_paths\": [\".github/workflows/ci.yml\", \".github/workflows/deploy.yml\"], \"commands\": [\"git push origin main\"], \"architecture_mentions\": [\"CI/CD pipeline\", \"automated deployment\"], \"error_messages\": [], \"counts\": {\"code_snippets\": 0, \"file_paths\": 2, \"commands\": 1, \"architecture_mentions\": 2, \"errors\": 0}}",
      "has_code": false,
      "has_files": true,
      "has_architecture": true
    }
  }
]
